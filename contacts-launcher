// Add these imports to the top of your existing ChatScreenViewModel.kt file
import android.content.Intent
import androidx.core.content.ContextCompat
import java.util.regex.Pattern

// Add these properties inside your ChatScreenViewModel class
// Regex patterns for contact detection
private val namePattern = Pattern.compile("(?:name|contact)[\\s:-]+([\\w\\s]+)", Pattern.CASE_INSENSITIVE)
private val phonePattern = Pattern.compile("(?:phone|tel|mobile)[\\s:-]+(\\+?[\\d\\s()-]{7,})", Pattern.CASE_INSENSITIVE)
private val emailPattern = Pattern.compile("(?:email|e-mail)[\\s:-]+([\\w.-]+@[\\w.-]+\\.[a-z]{2,})", Pattern.CASE_INSENSITIVE)

private val _contactDetected = MutableStateFlow(false)
val contactDetected: StateFlow<Boolean> = _contactDetected

private var detectedContactName: String? = null
private var detectedContactPhone: String? = null
private var detectedContactEmail: String? = null

// Add these methods to your existing ChatScreenViewModel class

// Check response for contact information - call this from sendUserQuery's onSuccess callback
private fun checkForContactInfo(response: String) {
    // Reset previous detection
    _contactDetected.value = false
    detectedContactName = null
    detectedContactPhone = null
    detectedContactEmail = null
    
    // Look for patterns in the response
    val nameMatcher = namePattern.matcher(response)
    val phoneMatcher = phonePattern.matcher(response)
    val emailMatcher = emailPattern.matcher(response)
    
    if (nameMatcher.find()) {
        detectedContactName = nameMatcher.group(1)?.trim()
    }
    
    if (phoneMatcher.find()) {
        detectedContactPhone = phoneMatcher.group(1)?.trim()
    }
    
    if (emailMatcher.find()) {
        detectedContactEmail = emailMatcher.group(1)?.trim()
    }
    
    // If at least name and one other piece of info is detected, consider it a contact
    if (detectedContactName != null && (detectedContactPhone != null || detectedContactEmail != null)) {
        _contactDetected.value = true
    }
}

// Launch contact add activity - call this when user clicks to add contact
fun addDetectedContact() {
    val intent = Intent(context, android.provider.ContactsContract.Intents.Insert.ACTION).apply {
        type = android.provider.ContactsContract.RawContacts.CONTENT_TYPE
        
        // Add contact data
        putExtra(android.provider.ContactsContract.Intents.Insert.NAME, detectedContactName)
        putExtra(android.provider.ContactsContract.Intents.Insert.PHONE, detectedContactPhone)
        putExtra(android.provider.ContactsContract.Intents.Insert.EMAIL, detectedContactEmail)
        addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
    }
    ContextCompat.startActivity(context, intent, null)
    
    // Reset detection after launching activity
    _contactDetected.value = false
}

// Dismiss the contact detection card
fun dismissContactDetection() {
    _contactDetected.value = false
}
